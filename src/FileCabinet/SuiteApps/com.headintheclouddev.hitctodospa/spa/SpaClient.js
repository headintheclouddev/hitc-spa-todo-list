define(["exports","@uif-js/core/jsx-runtime","@uif-js/core","N/log","@uif-js/component","N/query","N/record","N/runtime"],(function(e,t,n,o,s,i,r,c){"use strict";function l(){return t.jsx(s.Heading,{type:s.Heading.Type.PAGE_TITLE,children:"Task List"})}const a={ADD_TODO:Symbol("addToDo"),FETCH_TODOS:Symbol("fetchToDo"),TOGGLE_TODO:Symbol("toggleToDo"),REMOVE_TODO:Symbol("removeToDo"),FILTER_TODO:Symbol("filterToDo")},u={addToDo:e=>async t=>{const n=await async function(e){const t=await r.create.promise({type:"task"});t.setValue("title",e),t.setValue("assigned",c.getCurrentUser().id);const n=await t.save.promise();return String(n)}(e);t({type:a.ADD_TODO,id:n,title:e})},fetchToDo:()=>async e=>{const t=await async function(){const e=[],t=(await i.runSuiteQL.promise({query:`SELECT id, title, status FROM task WHERE assigned = ${c.getCurrentUser().id}`})).asMappedResults();for(const n of t)e.push({id:String(n.id),title:n.title,completed:"COMPLETE"==n.status});return e}();e({type:a.FETCH_TODOS,todos:t})},toggleToDo:e=>({type:a.TOGGLE_TODO,id:e}),removeToDo:e=>({type:a.REMOVE_TODO,id:e}),filterToDos:e=>({type:a.FILTER_TODO,filter:e})};function d(e,t){return{todos:f(e.todos,t),filter:T(e.filter,t)}}function T(e,t){return t.type==a.FILTER_TODO?t.filter:e}function f(e,t){switch(t.type){case a.FETCH_TODOS:return t.todos;case a.ADD_TODO:return[{id:t.id,title:t.title,completed:!1},...e];case a.TOGGLE_TODO:return e.map((e=>e.id==t.id?{...e,completed:!e.completed}:e),[]);case a.REMOVE_TODO:return e.filter((e=>e.id!=t.id));default:return e}}function p(e){return t.jsxs("div",{style:{width:400,height:25},children:[t.jsx(s.CheckBox,{value:e.completed,label:e.title,action:function(e){"click"==e.reason&&console.log("handleToggle - now",e.value,"was",e.previousValue,"at",new Date)}}),t.jsx(s.Button,{icon:n.SystemIcon.DELETE,action:function(){console.log("TODO: Implement task deletion")}})]})}function m(){const e=n.useSelector((e=>e.filter)),o=n.useSelector((e=>e.todos)),s=n.useMemo((()=>{switch(console.log("TodoList - filteredTodos",e,o),e){case"active":return o.filter((e=>!e.completed));case"completed":return o.filter((e=>!0===e.completed));default:return o}}),[e,o]).map((e=>t.jsx(p,{...e})));return t.jsx("div",{children:s})}function D(){const[e,o]=n.useState(""),i=n.useDispatch();return t.jsx(n.VDom.Fragment,{children:t.jsxs("div",{width:"300px",children:[t.jsx(s.TextBox,{type:s.TextBox.Type.TEXT,placeholder:"Enter new task...",onTextChanged:function(e){o(e.text)},text:e}),t.jsx(s.Button,{label:"Add",action:function(){e&&(i(u.addToDo(e)),o(""))}})]})})}function O(e){const o=n.useDispatch();const s={color:"blue",cursor:"pointer",fontWeight:n.useSelector((e=>e.filter))==e.name?"bold":"normal"};return t.jsx("span",{style:s,onClick:function(){console.log("handleFilter",e.name),o(u.filterToDos(e.name))},children:e.name})}function x(){return t.jsxs("div",{children:[t.jsx("span",{children:"Filter: "}),t.jsx(O,{name:"all"})," / ",t.jsx(O,{name:"active"})," / ",t.jsx(O,{name:"completed"})]})}const h={todos:[],filter:"all"};function E(){o.debug("App",`Initializing at ${new Date}`);const[e,i]=n.useState(h),r=n.useMemo((()=>n.Store.create({reducer:d,state:e,onStateChanged:({currentState:e})=>i(e)})));return n.useEffect((()=>r.subscribe((()=>i(r.getState())))),[]),n.useEffect((()=>{console.log("useEffect - fetchToDo",new Date),r.dispatch(u.fetchToDo())}),[]),t.jsx(n.Store.Provider,{store:r,children:t.jsxs(s.StackPanel,{alignment:s.StackPanel.Alignment.START,orientation:s.StackPanel.Orientation.VERTICAL,children:[t.jsx(s.StackPanel.Item,{children:t.jsx(l,{})}),t.jsx(s.StackPanel.Item,{children:t.jsx(D,{})}),t.jsx(s.StackPanel.Item,{children:t.jsx(m,{})}),t.jsx(s.StackPanel.Item,{children:t.jsx(x,{})})]})})}e.run=function(e){console.log("SpaClient version 250320a - run",e),e.setLayout("application"),e.setContent(t.jsx(E,{}))}}));
